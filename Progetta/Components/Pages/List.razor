@page "/list"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject TaskService TaskService
<h3>Lista</h3>
<br />

<button
    type="button"
    class="btn btn-primary"
    @onclick="AddTask">
    Dodaj zadanie
</button>
<br />

<DxButton Text="ShowColumnChooser"
    RenderStyle="ButtonRenderStyle.Secondary"
    CssClass="column-chooser-button"
    Click="OnClick"/>
<br />

<DxGrid Data="taskList" @ref="Grid" ColumnResizeMode="GridColumnResizeMode.NextColumn"
    ShowGroupPanel="true">
    
    <Columns>
        <DxGridDataColumn FieldName="Name" Caption="Nazwa Zadania"/>
        <DxGridDataColumn FieldName="Description" Caption="Opis" Visible=false />
        <DxGridDataColumn FieldName="Priority" Caption="Priorytet" />
        <DxGridDataColumn FieldName="Status" Caption="Status"/>
        <DxGridDataColumn FieldName="DueDate" Caption="Termin wykonania" />
        <DxGridDataColumn FieldName="StartAt" Caption="Data rozpoczęcia" />
        <DxGridDataColumn FieldName="EndAt" Caption="Data zakończenia" />
        <DxGridDataColumn FieldName="CreatedAt" Visible=false/>
        <DxGridDataColumn FieldName="UpdatedAt" />
    </Columns>
</DxGrid>

@code {
    DxGrid Grid { get; set; }
    private List<TaskToDo>? taskList;
    private TaskToDo task;

    protected override async Task OnInitializedAsync()
    {   
        taskList = await TaskService.GetAllTasksToDoAsync();
    }

    private async Task AddTask()
    {

        await TaskService.AddTaskAsync(new TaskToDo { Name = "Nowe zadanie", ProjectId = 1 });
        taskList = await TaskService.GetAllTasksToDoAsync();

    }

    private async Task HandleOnChange(TaskToDo task)
    {
        await TaskService.UpdateTaskToDoAsync(task);
    }

    void OnClick()
    {
        Grid.ShowColumnChooser(".column-chooser-button");
    }
}
