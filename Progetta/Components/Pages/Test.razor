@page "/test"
@rendermode InteractiveServer
@inject TaskService TaskService


<ViewTab></ViewTab>

<div @onclick="@(() => OnClickShow())">
    <p>CLICK TO SHOW A POP-UP WINDOW</p>
</div>


<DxButton Click="@((e) => OnClickShow())" Text="TEST" RenderStyle="ButtonRenderStyle.Primary" />

    <DxPopup @bind-Visible="@PopupVisible"

             HeaderText="Edytuj Zadanie"
             ShowFooter="true">
        <BodyTemplate Context="PopupContext">
            <div style="padding-top: 1rem; padding-bottom: 1rem">
                <DxFormLayout>
                    <DxFormLayoutItem Caption="Nazwa zadania:" ColSpanMd="12">
                        <Template>
                            <DxTextBox @bind-Text="@task.Name" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Opis:" ColSpanMd="12">
                        <Template>
                            <DxMemo @bind-Text="@task.Description"
                                    Rows="8"
                                    Columns="50"
                                    CssClass="cw-320"
                                    InputId="memoCustomSize" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Priorytet:" ColSpanMd="12">
                        <Template>
                            <PriorityComboBox></PriorityComboBox>
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Status:" ColSpanMd="12">
                        <Template>
                            <StatusComboBox></StatusComboBox>
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Projekt:" ColSpanMd="12">
                        <Template>
                            <ProjectComboBox></ProjectComboBox>
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Przydzielono do:" ColSpanMd="12">
                        <Template>
                            <UserComboBox></UserComboBox>
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Data rozpoczęcia:" ColSpanMd="12">
                        <Template>
                            <DxDateEdit Date="@task.StartAt"
                                        DateChanged="@((DateTime? date) => OnStartAtChanged(date))" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Termin wykonania:" ColSpanMd="12">
                        <Template>
                            <DxDateEdit Date="@task.DueDate"
                                        DateChanged="@((DateTime? date) => OnDueDateChanged(date))" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Dodał:" ColSpanMd="12">
                        <Template>

                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Data utworzenia:" ColSpanMd="12">
                        <Template>

                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Data ostatniej aktualizacji:" ColSpanMd="12">
                        <Template>

                        </Template>
                    </DxFormLayoutItem>
                </DxFormLayout>
            </div>
        </BodyTemplate>
        <FooterContentTemplate>
            <DxButton RenderStyle="ButtonRenderStyle.Primary" Text="OK"
                      Click="OnOkButtonClick" />
        </FooterContentTemplate>
    </DxPopup>

@code {

    public TaskPriority TaskPriority { get; set; }
    public Status Status { get; set; }

    bool PopupVisible { get; set; } = false;
    private List<TaskToDo>? taskList;
    private TaskToDo task;

    protected override async Task OnInitializedAsync()
    {
        taskList = await TaskService.GetAllTasksToDoAsync();

        task = taskList?.FirstOrDefault(); // Przypisz pierwszy element lub null, jeśli lista jest pusta
        base.OnInitialized();
    }

    void OnStartAtChanged(DateTime? date)
    {
        task.StartAt = date;
    }

    void OnDueDateChanged(DateTime? date)
    {
        task.DueDate = date;
    }

    void OnStatusChanged(Status status)
    {
        task.Status = status;
        SaveTaskChanges();  // Zapisz zmiany po zmianie statusu
    }

    async Task SaveTaskChanges()
    {
        // Możesz wywołać metodę aktualizującą w bazie danych
        await TaskService.UpdateTaskToDoAsync(task);
    }

    void OnOkButtonClick()
    {
        // Można tu dodatkowo zapisać zmiany lub wykonać inne akcje
        SaveTaskChanges();
        PopupVisible = false; // Zamknięcie popupu
    }

    void OnClickShow()
    {
        PopupVisible = true;
    }
}