@page "/scheduler"
@using System.Globalization
@rendermode InteractiveServer
@inject TaskService TaskService

<DxScheduler @rendermode="InteractiveAuto"
             @bind-StartDate="@StartDate"
             DataStorage="@_dataStorage"
             ValidateEditForm="true"
             @bind-ActiveViewType="@ActiveViewType"
             @bind-AppointmentFormMode="@AppointmentFormMode"
             AppointmentUpdated="OnAppointmentUpdate"
             CssClass="demo-sc-size">
    <Views>
        <DxSchedulerDayView VisibleTime="@VisibleTime"></DxSchedulerDayView>
      @*   <DxSchedulerWorkWeekView VisibleTime="@VisibleTime"></DxSchedulerWorkWeekView>
        <DxSchedulerWeekView VisibleTime="@VisibleTime"></DxSchedulerWeekView>
        <DxSchedulerMonthView CellMinWidth="120"></DxSchedulerMonthView>
        <DxSchedulerTimelineView Duration="@(TimeSpan.FromDays(7))" CellMinWidth="100">
            <Scales>
                <DxSchedulerTimeScale Unit="@SchedulerTimeScaleUnit.Week"></DxSchedulerTimeScale>
                <DxSchedulerTimeScale Unit="@SchedulerTimeScaleUnit.Day"></DxSchedulerTimeScale>
            </Scales>
        </DxSchedulerTimelineView> *@
    </Views>
    <AppointmentFormHeaderTemplate>
        <div class="popup-text-header">@context.Subject</div>
        <DxSchedulerSaveAppointmentChangesButton></DxSchedulerSaveAppointmentChangesButton>
        <DxSchedulerDeleteAppointmentButton Text="@null"></DxSchedulerDeleteAppointmentButton>
        <DxSchedulerDiscardAppointmentChangesButton></DxSchedulerDiscardAppointmentChangesButton>
        @if (AppointmentFormMode == SchedulerAppointmentFormMode.Both)
        {
            <DxButton Click="@(() => {})"
                      IconCssClass="btn-icon-back"
                      RenderStyle="ButtonRenderStyle.None"
                      CssClass="dxbl-btn-tool">
            </DxButton>
        }
    </AppointmentFormHeaderTemplate>
    <AppointmentFormLayout Context="formInfo">
        <DxSchedulerSubjectFormLayoutItem></DxSchedulerSubjectFormLayoutItem>
        <DxSchedulerAllDayFormLayoutItem></DxSchedulerAllDayFormLayoutItem>
        <DxSchedulerStartDateFormLayoutItem></DxSchedulerStartDateFormLayoutItem>
        <DxSchedulerStartTimeFormLayoutItem></DxSchedulerStartTimeFormLayoutItem>
        <DxSchedulerEndDateFormLayoutItem></DxSchedulerEndDateFormLayoutItem>
        <DxSchedulerEndTimeFormLayoutItem></DxSchedulerEndTimeFormLayoutItem>
        <DxSchedulerRepeatFormLayoutItem></DxSchedulerRepeatFormLayoutItem>
        <DxSchedulerLabelFormLayoutItem></DxSchedulerLabelFormLayoutItem>
        <DxSchedulerDescriptionFormLayoutItem></DxSchedulerDescriptionFormLayoutItem>
        <DxSchedulerCustomFormLayoutItem ColSpanMd="12">
            <Template>
                <ValidationSummary />
            </Template>
        </DxSchedulerCustomFormLayoutItem>
    </AppointmentFormLayout>
    <AppointmentCompactFormHeaderTemplate>
        <div class="popup-text-header">@context.Subject</div>
        <DxSchedulerSaveAppointmentChangesButton></DxSchedulerSaveAppointmentChangesButton>
        <DxSchedulerDeleteAppointmentButton Text="@null"></DxSchedulerDeleteAppointmentButton>
        <DxSchedulerDiscardAppointmentChangesButton></DxSchedulerDiscardAppointmentChangesButton>
        @if (AppointmentFormMode == SchedulerAppointmentFormMode.Both)
        {
            <DxSchedulerShowAppointmentEditFormButton></DxSchedulerShowAppointmentEditFormButton>
        }
    </AppointmentCompactFormHeaderTemplate>
    <AppointmentCompactFormLayout Context="formInfo">
        <DxSchedulerSubjectFormLayoutItem></DxSchedulerSubjectFormLayoutItem>
        <DxSchedulerAllDayFormLayoutItem></DxSchedulerAllDayFormLayoutItem>
        <DxSchedulerStartDateFormLayoutItem></DxSchedulerStartDateFormLayoutItem>
        <DxSchedulerStartTimeFormLayoutItem></DxSchedulerStartTimeFormLayoutItem>
        <DxSchedulerEndDateFormLayoutItem></DxSchedulerEndDateFormLayoutItem>
        <DxSchedulerEndTimeFormLayoutItem></DxSchedulerEndTimeFormLayoutItem>
        <DxSchedulerRepeatFormLayoutItem></DxSchedulerRepeatFormLayoutItem>
        <DxSchedulerLabelFormLayoutItem></DxSchedulerLabelFormLayoutItem>
        <DxSchedulerDescriptionFormLayoutItem></DxSchedulerDescriptionFormLayoutItem>
        <DxSchedulerCustomFormLayoutItem ColSpanMd="12">
            <Template>
                <ValidationSummary />
            </Template>
        </DxSchedulerCustomFormLayoutItem>
    </AppointmentCompactFormLayout>
</DxScheduler>

@code {
    public DxScheduler SchedulerItem { get; set; }
    DateTime StartDate { get; set; } = DateTime.Today;
    SchedulerAppointmentFormMode AppointmentFormMode { get; set; } = SchedulerAppointmentFormMode.Both;
    SchedulerViewType ActiveViewType { get; set; } = SchedulerViewType.Day;
    DxSchedulerTimeSpanRange VisibleTime = new DxSchedulerTimeSpanRange(TimeSpan.FromHours(8), TimeSpan.FromHours(19));
    private DxSchedulerDataStorage _dataStorage;


    public async Task OnAppointmentUpdate(DxSchedulerAppointmentItem item)
    {
        if (item.Id is int id)
        {
            TaskToDo taskToDo = await TaskService.GetTaskToDoByIdAsync(id);

            taskToDo.Name = item.Subject;
            taskToDo.Description = item.Description;
            taskToDo.StartAt = item.Start;
            taskToDo.DueDate = item.End;
            taskToDo.Priority = (TaskPriority)(int)item.LabelId;

            await TaskService.UpdateTaskToDoAsync(taskToDo);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        var tasksToDo = await TaskService.GetAllTasksToDoAsync();

        List<Appointment> appointments = new List<Appointment>();
        foreach (TaskToDo taskToDo in tasksToDo)
        {
            DateTime startAt = taskToDo.StartAt ?? DateTime.Now;
            DateTime endDate = taskToDo.DueDate ?? DateTime.Now;

            Appointment appointment = new Appointment
            {
                Id = taskToDo.Id,
                AppointmentType = 1,
                Caption = taskToDo.Name,
                Label = 1,
                StartDate = startAt,
                EndDate = endDate,
                Description = taskToDo.Description,
                Recurrence = string.Format("<RecurrenceInfo Start=\"{0}\" Month=\"{1}\" DayNumber=\"{2}\" WeekOfMonth=\"0\" Id=\"{3}\" Type=\"3\" />", ToString(startAt), startAt.Month, startAt.Day, Guid.NewGuid()),
                ResourceId = 0,
            };
            appointments.Add(appointment);
        }


        _dataStorage = new DxSchedulerDataStorage()
            {
                AppointmentsSource = appointments,
                AppointmentMappings = new DxSchedulerAppointmentMappings()
                {
                    Id = "Id",
                    Type = "AppointmentType",
                    Start = "StartDate",
                    End = "EndDate",
                    Subject = "Caption",
                    AllDay = "AllDay",
                    Description = "Description",
                    LabelId = "Label",
                    StatusId = "Status",
                    RecurrenceInfo = "Recurrence",
                    // CustomFieldMappings = [
                    //         new DxSchedulerCustomFieldMapping { Name = "", Mapping = "" }
                    // ]

                }
            };
    }

    private static string ToString(DateTime dateTime)
    {
        return dateTime.ToString(CultureInfo.InvariantCulture);
    }

    void OnAppointmentFormShowing(SchedulerAppointmentFormEventArgs args)
    {
        args.FormInfo = new CustomAppointmentFormInfo(args.Appointment, DataStorage, SchedulerItem);
    }
    
    public class CustomAppointmentFormInfo : SchedulerAppointmentFormInfo
    {
        public CustomAppointmentFormInfo(DxSchedulerAppointmentItem AppointmentItem, DxSchedulerDataStorage DataStorage, DxScheduler scheduler)
            : base(AppointmentItem, DataStorage, scheduler) {}


        public override string Subject
        {
            get { return base.Subject; }
            set { base.Subject = value; }
        }
    }

    public class Appointment
    {
        public Appointment() { }
        public int Id { get; set; }
        public int AppointmentType { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Caption { get; set; }
        public string Description { get; set; }
        public int? Label { get; set; }
        public int Status { get; set; }
        public bool AllDay { get; set; }
        public string Recurrence { get; set; }
        public int? ResourceId { get; set; }
        public string Resources { get; set; }
        public bool Accepted { get; set; }
    }

    public DxSchedulerDataStorage DataStorage => _dataStorage;
}


