@page "/scheduler"
@rendermode InteractiveServer
@inject TaskService TaskService

<div @onclick="@(() => PopupVisible = true)">
    <p>CLICK TO SHOW A POP-UP WINDOW</p>
</div>

<DxPopup @bind-Visible="@PopupVisible"
         HeaderText="Edit Contact"
         ShowFooter="true">
    <BodyTemplate Context="PopupContext">
        <div style="padding-top: 1rem; padding-bottom: 1rem">
            <DxFormLayout>
                <DxFormLayoutItem Caption="Nazwa zadania:" ColSpanMd="12">
                    <Template>
                        <DxTextBox Text="Nowe zadanie" />
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Opis:" ColSpanMd="12">
                    <Template>
                        <DxMemo Rows="8"
                                Columns="50"
                                CssClass="cw-320"
                                InputId="memoCustomSize" />
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Priorytet:" ColSpanMd="12">

                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Status:" ColSpanMd="12">
                    <Template>
                        <StatusComboBox></StatusComboBox>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Projekt:" ColSpanMd="12">

                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Przydzielono do:" ColSpanMd="12">
                    <Template>

                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Data rozpoczęcia:" ColSpanMd="12">
                    <Template>
                        <DxDateEdit Date="@task.StartAt"
                                    DateChanged="@((DateTime? date) => OnStartAtChanged(date))" />
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Termin wykonania:" ColSpanMd="12">
                    <Template>
                        <DxDateEdit Date="@task.DueDate"
                                    DateChanged="@((DateTime? date) => OnDueDateChanged(date))" />
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Dodał:" ColSpanMd="12">
                    <Template>
                        
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Data utworzenia:" ColSpanMd="12">
                    <Template>

                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Data ostatniej aktualizacji:" ColSpanMd="12">
                    <Template>

                    </Template>
                </DxFormLayoutItem>
            </DxFormLayout>
        </div>
    </BodyTemplate>
    <FooterContentTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" Text="OK"
                  Click="@context.CloseCallback" />
    </FooterContentTemplate>
</DxPopup>

@code {
    bool PopupVisible { get; set; } = false;
    private List<TaskToDo>? taskList;
    private TaskToDo task;

    void OnStartAtChanged(DateTime? date)
    {
        task.StartAt = date;
    }

    void OnDueDateChanged(DateTime? date)
    {
        task.DueDate = date;
    }

    protected override async Task OnInitializedAsync()
    {
        task = new TaskToDo
            {
                Id = 1,
                Name = "Przykładowe zadanie",
                StartAt = null // Początkowo brak daty
            };
    }
}

