@page "/scheduler"
@using System.Globalization
@rendermode InteractiveServer
@inject TaskService TaskService

<DxScheduler @bind-StartDate="@StartDate"
             DataStorage="@_dataStorage"
             @bind-ActiveViewType="@ActiveViewType"
             AppointmentFormMode="SchedulerAppointmentFormMode.EditForm"
             CssClass="demo-sc-size">
    <DxSchedulerDayView VisibleTime="@VisibleTime"></DxSchedulerDayView>
    <DxSchedulerWorkWeekView VisibleTime="@VisibleTime"></DxSchedulerWorkWeekView>
    <DxSchedulerWeekView VisibleTime="@VisibleTime"></DxSchedulerWeekView>
    <DxSchedulerMonthView CellMinWidth="120"></DxSchedulerMonthView>
    <DxSchedulerTimelineView Duration="@(TimeSpan.FromDays(7))" CellMinWidth="100">
        <Scales>
            <DxSchedulerTimeScale Unit="@SchedulerTimeScaleUnit.Week"></DxSchedulerTimeScale>
            <DxSchedulerTimeScale Unit="@SchedulerTimeScaleUnit.Day"></DxSchedulerTimeScale>
        </Scales>
    </DxSchedulerTimelineView>
</DxScheduler>

@code {
    DateTime StartDate { get; set; } = DateTime.Today;
    SchedulerViewType ActiveViewType { get; set; } = SchedulerViewType.WorkWeek;
    DxSchedulerTimeSpanRange VisibleTime = new DxSchedulerTimeSpanRange(TimeSpan.FromHours(8), TimeSpan.FromHours(19));
    private DxSchedulerDataStorage _dataStorage;

    protected override async Task OnInitializedAsync()
    {
        var tasksToDo = await TaskService.GetAllTasksToDoAsync();

        List<Appointment> appointments = new List<Appointment>();
        foreach (TaskToDo taskToDo in tasksToDo)
        {
            DateTime startAt = taskToDo.StartAt ?? DateTime.Now;
            DateTime endDate = taskToDo.DueDate ?? DateTime.Now;

            Appointment appointment = new Appointment
            {
                AppointmentType = 1,
                Caption = taskToDo.Name,
                Label = 1,
                StartDate = startAt,
                EndDate = endDate,
                Recurrence = string.Format("<RecurrenceInfo Start=\"{0}\" Month=\"{1}\" DayNumber=\"{2}\" WeekOfMonth=\"0\" Id=\"{3}\" Type=\"3\" />", ToString(startAt), startAt.Month, startAt.Day, Guid.NewGuid()),
                ResourceId = 0
            };
            appointments.Add(appointment);
        }


        _dataStorage = new DxSchedulerDataStorage()
            {
                AppointmentsSource = appointments,
                AppointmentMappings = new DxSchedulerAppointmentMappings()
                {
                    Type = "AppointmentType",
                    Start = "StartDate",
                    End = "EndDate",
                    Subject = "Caption",
                    AllDay = "AllDay",
                    Description = "Description",
                    LabelId = "Label",
                    StatusId = "Status",
                    RecurrenceInfo = "Recurrence"
                    
                }
            };
    }

    private static string ToString(DateTime dateTime)
    {
        return dateTime.ToString(CultureInfo.InvariantCulture);
    }

    public class Appointment
    {
        public Appointment() { }
        public int AppointmentType { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Caption { get; set; }
        public string Description { get; set; }
        public int? Label { get; set; }
        public int Status { get; set; }
        public bool AllDay { get; set; }
        public string Recurrence { get; set; }
        public int? ResourceId { get; set; }
        public string Resources { get; set; }
        public bool Accepted { get; set; }
    }

    public DxSchedulerDataStorage DataStorage => _dataStorage;
}


