@page "/scheduler"

@rendermode InteractiveServer
@inject TaskService TaskService
@inject UserService UserService
@inject IDbContextFactory<ProjectContext> ContextFactory;

<DxScheduler @rendermode="InteractiveAuto"
             @bind-StartDate="@StartDate"
             DataStorage="@_dataStorage"
             ValidateEditForm="true"
             @bind-ActiveViewType="@ActiveViewType"
             @bind-AppointmentFormMode="@AppointmentFormMode"
             AppointmentUpdating="OnAppointmentUpdating"
             AppointmentUpdated="OnAppointmentUpdate"
             AppointmentFormShowing="OnAppointmentFormShowing"
             CssClass="demo-sc-size">
    <Views>
        <DxSchedulerDayView VisibleTime="@VisibleTime"></DxSchedulerDayView>
         <DxSchedulerWorkWeekView VisibleTime="@VisibleTime"></DxSchedulerWorkWeekView>
        <DxSchedulerWeekView VisibleTime="@VisibleTime"></DxSchedulerWeekView>
        <DxSchedulerMonthView CellMinWidth="120"></DxSchedulerMonthView>
        <DxSchedulerTimelineView Duration="@(TimeSpan.FromDays(7))" CellMinWidth="100">
            <Scales>
                <DxSchedulerTimeScale Unit="@SchedulerTimeScaleUnit.Week"></DxSchedulerTimeScale>
                <DxSchedulerTimeScale Unit="@SchedulerTimeScaleUnit.Day"></DxSchedulerTimeScale>
            </Scales>
        </DxSchedulerTimelineView> 
    </Views>
    <AppointmentFormHeaderTemplate>
        <div class="popup-text-header">@(((CustomAppointmentFormInfo)context).Subject)</div>
        <DxSchedulerSaveAppointmentChangesButton></DxSchedulerSaveAppointmentChangesButton>
        <DxSchedulerDeleteAppointmentButton Text="@null"></DxSchedulerDeleteAppointmentButton>
        <DxSchedulerDiscardAppointmentChangesButton></DxSchedulerDiscardAppointmentChangesButton>
        @if (AppointmentFormMode == SchedulerAppointmentFormMode.Both)
        {
            <DxButton Click="@(() => {})"
                      IconCssClass="btn-icon-back"
                      RenderStyle="ButtonRenderStyle.None"
                      CssClass="dxbl-btn-tool">
            </DxButton>
        }
    </AppointmentFormHeaderTemplate>
    <AppointmentFormLayout Context="formInfo">
        <DxSchedulerCustomFormLayoutItem ColSpanMd="10">
            <Template>
                <DxTextBox @bind-Text="@(((CustomAppointmentFormInfo)formInfo).Name)" />
            </Template>
        </DxSchedulerCustomFormLayoutItem>
        <DxSchedulerAllDayFormLayoutItem></DxSchedulerAllDayFormLayoutItem>
        <DxSchedulerStartDateFormLayoutItem></DxSchedulerStartDateFormLayoutItem>
        <DxSchedulerStartTimeFormLayoutItem></DxSchedulerStartTimeFormLayoutItem>
        <DxSchedulerEndDateFormLayoutItem></DxSchedulerEndDateFormLayoutItem>
        <DxSchedulerEndTimeFormLayoutItem></DxSchedulerEndTimeFormLayoutItem>
        <DxSchedulerLabelFormLayoutItem></DxSchedulerLabelFormLayoutItem>
        <DxSchedulerDescriptionFormLayoutItem></DxSchedulerDescriptionFormLayoutItem>
        <DxSchedulerCustomFormLayoutItem ColSpanMd="10">
            <Template>
                <ValidationSummary />
            </Template>
        </DxSchedulerCustomFormLayoutItem>
    </AppointmentFormLayout>
    <AppointmentCompactFormHeaderTemplate>
        <div class="popup-text-header">@(((CustomAppointmentFormInfo)context).Subject)</div>
        <DxSchedulerSaveAppointmentChangesButton></DxSchedulerSaveAppointmentChangesButton>
        <DxSchedulerDeleteAppointmentButton Text="@null"></DxSchedulerDeleteAppointmentButton>
        <DxSchedulerDiscardAppointmentChangesButton></DxSchedulerDiscardAppointmentChangesButton>
        @if (AppointmentFormMode == SchedulerAppointmentFormMode.Both)
        {
            <DxSchedulerShowAppointmentEditFormButton></DxSchedulerShowAppointmentEditFormButton>
        }
    </AppointmentCompactFormHeaderTemplate>
    <AppointmentCompactFormLayout Context="formInfo">
        <DxSchedulerCustomFormLayoutItem ColSpanMd="12">
            <Template>
                <DxTextBox @bind-Text="@(((CustomAppointmentFormInfo)formInfo).Name)" />
            </Template>
        </DxSchedulerCustomFormLayoutItem>
        <DxSchedulerAllDayFormLayoutItem></DxSchedulerAllDayFormLayoutItem>
        <DxSchedulerStartDateFormLayoutItem></DxSchedulerStartDateFormLayoutItem>
        <DxSchedulerStartTimeFormLayoutItem></DxSchedulerStartTimeFormLayoutItem>
        <DxSchedulerEndDateFormLayoutItem></DxSchedulerEndDateFormLayoutItem>
        <DxSchedulerEndTimeFormLayoutItem></DxSchedulerEndTimeFormLayoutItem>
        <DxSchedulerCustomFormLayoutItem ColSpanMd="10">
            <Template>
                <DxComboBox Data="AllUsers"
                            ValueFieldName="Id"
                            TextFieldName="FullName"
                            @bind-Value="@(((CustomAppointmentFormInfo)formInfo).AssignedToId)">
                </DxComboBox>
            </Template>
        </DxSchedulerCustomFormLayoutItem>
        <DxSchedulerDescriptionFormLayoutItem></DxSchedulerDescriptionFormLayoutItem>
        <DxSchedulerCustomFormLayoutItem ColSpanMd="12">
            <Template>
                <ValidationSummary />
            </Template>
        </DxSchedulerCustomFormLayoutItem>
    </AppointmentCompactFormLayout>
</DxScheduler>

@code {
    List<User> AllUsers = new List<User>();

    public DxScheduler SchedulerItem { get; set; }
    DateTime StartDate { get; set; } = DateTime.Today;
    SchedulerAppointmentFormMode AppointmentFormMode { get; set; } = SchedulerAppointmentFormMode.Both;
    SchedulerViewType ActiveViewType { get; set; } = SchedulerViewType.Day;
    DxSchedulerTimeSpanRange VisibleTime = new DxSchedulerTimeSpanRange(TimeSpan.FromHours(8), TimeSpan.FromHours(19));
    private DxSchedulerDataStorage _dataStorage;


    public async Task OnAppointmentUpdating(SchedulerAppointmentOperationEventArgs args)
    {
        if(args.Appointment.SourceObject is Appointment appointment)
        {
            using ProjectContext context = ContextFactory.CreateDbContext();
            TaskToDo taskToDo = await context.TasksToDo
                .Include(t => t.Project)
                .Include(t => t.AssignedTo)
                .Include(t => t.Comments)
                .Include(t => t.TaskTags)
                .FirstOrDefaultAsync(t => t.Id == appointment.Id);

            taskToDo.Name = appointment.Name;
            taskToDo.Description = appointment.Description;
            taskToDo.StartAt = appointment.StartDate;
            taskToDo.DueDate = appointment.EndDate;
            taskToDo.AssignedToId = appointment.AssignedToId;
            await context.SaveChangesAsync();

            taskToDo = await context.TasksToDo
                .Include(t => t.Project)
                .Include(t => t.AssignedTo)
                .Include(t => t.Comments)
                .Include(t => t.TaskTags)
                .FirstOrDefaultAsync(t => t.Id == appointment.Id);

            appointment.AssignedTo = taskToDo.AssignedTo;
            args.Appointment.Subject = appointment.AssignedTo?.FullName ?? string.Empty;
            args.Appointment.LabelId = (int)(taskToDo.AssignedTo?.LabelId ?? 0);
        }
    }

    public async Task OnAppointmentUpdate(DxSchedulerAppointmentItem item)
    {
        // if (item.SourceObject is Appointment appointment)
        // {
        //     using ProjectContext context = ContextFactory.CreateDbContext();
        //     TaskToDo taskToDo = await context.TasksToDo
        //         .Include(t => t.Project)
        //         .Include(t => t.AssignedTo)
        //         .Include(t => t.Comments)
        //         .Include(t => t.TaskTags)
        //         .FirstOrDefaultAsync(t => t.Id == appointment.Id);

        //     taskToDo.Name = appointment.Name;
        //     taskToDo.Description = appointment.Description;
        //     taskToDo.StartAt = appointment.StartDate;
        //     taskToDo.DueDate = appointment.EndDate;
        //     taskToDo.AssignedToId = appointment.AssignedToId;
        //     await context.SaveChangesAsync();

        //     taskToDo = await context.TasksToDo
        //         .Include(t => t.Project)
        //         .Include(t => t.AssignedTo)
        //         .Include(t => t.Comments)
        //         .Include(t => t.TaskTags)
        //         .FirstOrDefaultAsync(t => t.Id == appointment.Id);


        //     appointment.Label = (int)(taskToDo.AssignedTo?.LabelId ?? 0);
        //     appointment.AssignedTo = taskToDo.AssignedTo;

        //     item.Subject = appointment.Caption;
        //     item.LabelId = (int)(taskToDo.AssignedTo?.LabelId ?? 0);
        // }
    }

    protected override async Task OnInitializedAsync()
    {
        AllUsers = await UserService.GetUsersAsync();

        var tasksToDo = await TaskService.GetAllTasksToDoAsync();

        List<Appointment> appointments = new List<Appointment>();
        foreach (TaskToDo taskToDo in tasksToDo)
        {
            DateTime startAt = taskToDo.StartAt ?? DateTime.Now;
            DateTime endDate = taskToDo.DueDate ?? DateTime.Now;

            Appointment appointment = new Appointment
            {
                Id = taskToDo.Id,
                AppointmentType = 0,
                Name = taskToDo.Name,
                Label = (int)(taskToDo.AssignedTo?.LabelId ?? 0),
                StartDate = startAt,
                EndDate = endDate,
                Description = taskToDo.Description,
                ResourceId = 0,
                AssignedTo = taskToDo.AssignedTo,
                AssignedToId = taskToDo.AssignedTo?.Id ?? 0
            };

            appointments.Add(appointment);
        }

        _dataStorage = new DxSchedulerDataStorage()
            {
                AppointmentsSource = appointments,
                AppointmentMappings = new DxSchedulerAppointmentMappings()
                {
                    Id = "Id",
                    Type = "AppointmentType",
                    Start = "StartDate",
                    End = "EndDate",
                    Subject = "Caption",
                    AllDay = "AllDay",
                    Description = "Description",
                    LabelId = "Label",
                    StatusId = "Status",
                    CustomFieldMappings = [
                        new DxSchedulerCustomFieldMapping { Name = "Name", Mapping = "Name" },
                        new DxSchedulerCustomFieldMapping { Name = "AssignedToId", Mapping = "AssignedToId" }
                    ]

                }
            };
    }

    private static string ToString(DateTime dateTime)
    {
        return dateTime.ToString(CultureInfo.InvariantCulture);
    }

    void OnAppointmentFormShowing(SchedulerAppointmentFormEventArgs args)
    {
        args.FormInfo = new CustomAppointmentFormInfo(args.Appointment, DataStorage, SchedulerItem);
    }

    public class CustomAppointmentFormInfo : SchedulerAppointmentFormInfo
    {
        public CustomAppointmentFormInfo(DxSchedulerAppointmentItem AppointmentItem, DxSchedulerDataStorage DataStorage, DxScheduler scheduler)
            : base(AppointmentItem, DataStorage, scheduler) {}

        public override string Subject
        {
            get => base.Subject;
            set { base.Subject = value; }
        }

        public int AssignedToId
        {
            get => (int)CustomFields["AssignedToId"];
            set { CustomFields["AssignedToId"] = value; }
        }

        public string Name
        {
            get => (string)CustomFields["Name"];
            set { CustomFields["Name"] = value; }
        }
    }

    public class Appointment
    {
        public int Id { get; set; }
        public int AppointmentType { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Caption
        {
            get
            {
                if(AssignedTo is null)
                {
                    return Name;
                }
                return $"{Name} ({AssignedTo.FullName})";
            }
            set
            {
                Name = value;
            }
        }
        public string Name { get; set; }
        public string Description { get; set; }
        public int? Label { get; set; }
        public int Status { get; set; }
        public bool AllDay { get; set; }
        public string Recurrence { get; set; }
        public int? ResourceId { get; set; }
        public string Resources { get; set; }
        public bool Accepted { get; set; }
        public User AssignedTo { get; set; }
        public int AssignedToId { get; set; }
    }

    public DxSchedulerDataStorage DataStorage => _dataStorage;
}


