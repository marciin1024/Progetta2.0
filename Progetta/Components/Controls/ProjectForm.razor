@rendermode InteractiveServer
@inject ProjectService ProjectService

<DxPopup
    @bind-Visible="@Visible"
    ShowFooter="true"
    HeaderText="Edytuj Projekt"
    CloseButtonClick="OnCloseButtonClick">
    <BodyContentTemplate Context="PopupContext">
    <BodyTemplate>
        <div style="padding-top: 1rem; padding-bottom: 1rem">
            <DxFormLayout>
                <DxFormLayoutItem Caption="Nazwa zadania:" ColSpanMd="12">
                    <Template Context="TaskContext">
                        <DxTextBox @bind-Text="@Project.Name" />
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Opis:" ColSpanMd="12">
                    <Template Context="DescriptionContext">
                            <DxMemo @bind-Text="@Project.Description"
                                    Rows="8"
                                    Columns="50"
                                    CssClass="cw-320"
                                    InputId="memoCustomSize" />
                    </Template>
                </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Kategoria:" ColSpanMd="12">
                        <Template Context="CategoryContext">
                            <CategoryComboBox SelectedCategory="Project.Category"
                                              SelectedCategoryChanged="(category) => Project.Category = category"></CategoryComboBox>
                        </Template>
                    </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Dodaj użytkownika:" ColSpanMd="12">
                    <Template Context="UserContext">
                            <UserComboBox></UserComboBox>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Data rozpoczęcia:" ColSpanMd="12">
                    <Template Context="StartDateContext">
                            <DxDateEdit @bind-Date="@Project.StartAt"
                                        TimeSectionVisible="true"
                                        TimeSectionScrollPickerFormat="HH mm" />
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Termin wykonania:" ColSpanMd="12">
                        <Template Context="EndDateContext">
                            <DxDateEdit @bind-Date="@Project.DueDate"
                                        TimeSectionVisible="true"
                                        TimeSectionScrollPickerFormat="HH mm" />
                    </Template>
                </DxFormLayoutItem>
            </DxFormLayout>
        </div>
    </BodyTemplate>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="OK" Click="OnOkButtonClick" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => Visible = false)" />
    </FooterContentTemplate>
</DxPopup>
@code {
    [Parameter]
    public bool Visible { get; set; } = false;

    [Parameter]
    public Project Project { get; set; }

    [Parameter]
    public Action<bool> SetVisiblity { get; set; }





    public TaskPriority TaskPriority { get; set; }
    public Status Status { get; set; }

    public string Message { get; set; }

    

    [Parameter]
    public TaskToDo Task { get; set; }

    User AssignedTo { get; set; }

    

    void OnStartAtChanged(DateTime? date)
    {
        Task.StartAt = date;
    }

    void OnDueDateChanged(DateTime? date)
    {
        Task.DueDate = date;
    }

    void OnAddCommentClick()
    {
        Comment comment = new Comment
            {
                Message = Message
            };

        Task.Comments.Add(comment);
    }

    void OnStatusChanged(Status status)
    {
        Task.Status = status;
        SaveTaskChanges();  // Zapisz zmiany po zmianie statusu
    }

    async Task SaveTaskChanges()
    {
        // Możesz wywołać metodę aktualizującą w bazie danych
        await ProjectService.UpdateProjectAsync(Project);
    }

    void OnOkButtonClick()
    {
        // Można tu dodatkowo zapisać zmiany lub wykonać inne akcje
        SaveTaskChanges();
        SetVisiblity?.Invoke(false);
    }

    void OnCloseButtonClick()
    {
        SetVisiblity?.Invoke(false);
    }
}
