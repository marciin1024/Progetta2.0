@rendermode InteractiveServer
@inject TaskService TaskService

<DxPopup @bind-Visible="@Visible"
         HeaderText="Edytuj Zadanie"
         CloseButtonClick="OnCloseButtonClick"
         ShowFooter="true">
    <BodyTemplate Context="PopupContext">
        <div style="padding-top: 1rem; padding-bottom: 1rem">
            <DxFormLayout>
                <DxFormLayoutItem Caption="Nazwa zadania:" ColSpanMd="12">
                    <Template>
                        <DxTextBox @bind-Text="@Task.Name" />
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Opis:" ColSpanMd="12">
                    <Template>
                        <DxMemo @bind-Text="@Task.Description"
                                Rows="8"
                                Columns="50"
                                CssClass="cw-320"
                                InputId="memoCustomSize" />
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Priorytet:" ColSpanMd="12">
                    <Template>
                        <PriorityComboBox
                            TaskPriority="Task.Priority"
                            SelectedPriorityChanged="(taskPriority) => Task.Priority = taskPriority"
                        ></PriorityComboBox>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Status:" ColSpanMd="12">
                    <Template>
                        <StatusComboBox
                            Status="Task.Status"
                            SelectedStatusChanged="(status) => Task.Status = status"></StatusComboBox>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Projekt:" ColSpanMd="12">
                    <Template>
                        <ProjectComboBox
                            Project="Task.Project"
                            SelectedProjectChanged="(project) => Task.Project = project"
                        ></ProjectComboBox>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Przydzielono do:" ColSpanMd="12">
                    <Template>
                        <UserComboBox SelectedUser="Task.AssignedTo"
                            SelectedUserChanged="(user) => Task.AssignedTo = user"
                        ></UserComboBox>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Data rozpoczęcia:" ColSpanMd="12">
                    <Template>
                        <DxDateEdit @bind-Date="@Task.StartAt"
                                    TimeSectionVisible="true"
                                    TimeSectionScrollPickerFormat="HH mm"/>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Termin wykonania:" ColSpanMd="12">
                    <Template>
                        <DxDateEdit @bind-Date="@Task.DueDate"
                                    TimeSectionVisible="true"
                                    TimeSectionScrollPickerFormat="HH mm" />
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Tagi:" ColSpanMd="12">
                    <Template Context="CategoryContext">
                        <div class="category">
                            <div style="width: 90%; box-sizing: border-box;" class="d-flex justify-content-end">
                                <div style="width: 90%; box-sizing: border-box;">
                                    <TagBox></TagBox>
                                </div>
                            </div>
                            <div style="width: 10%; box-sizing: border-box;" class="d-flex justify-content-center align-content-center">
                                <DxButton CssClass="grid-delete-btn"
                                          IconCssClass="grid-icon grid-icon-add"
                                          RenderStyle="ButtonRenderStyle.Link"
                                          aria-label="Add"
                                          Click="ShowTagForm" />
                            </div>
                        </div>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Dodał:" ColSpanMd="12">
                    <Template>
                        <span>@Task.CreatedBy</span>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Data utworzenia:" ColSpanMd="12">
                    <Template>
                        <span>@Task.CreatedAt</span>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Data ostatniej aktualizacji:" ColSpanMd="12">
                    <Template>
                        <span>@Task.UpdatedAt</span>
                    </Template>
                </DxFormLayoutItem>
                <DxSchedulerCustomFormLayoutItem>
                    <Template>
                        <div>
                            @if (Task.Comments is not null)
                            {
                                @foreach (Comment comment in Task.Comments)
                                {
                                    <div>
                                        <p>
                                            @comment.User?.FullName
                                        </p>
                                        <p>
                                            @comment.CreatedAt
                                        </p>
                                        <p>
                                            @comment.Message
                                        </p>
                                    </div>
                                }
                            }
                        </div>

                        <DxFormLayout CaptionPosition=@CaptionPosition.Vertical>
                            <DxFormLayoutItem Caption="Message" ColSpanMd="12" BeginRow="true">
                                <DxTextBox Name="Message" @bind-Text="Message" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                                <DxButton CssClass="w-100" Text="Add" Click="OnAddCommentClick"></DxButton>
                            </DxFormLayoutItem>
                        </DxFormLayout>
                    </Template>
                </DxSchedulerCustomFormLayoutItem>
            </DxFormLayout>
        </div>
    </BodyTemplate>
    <FooterContentTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" Text="OK"
                  Click="OnOkButtonClick" />
    </FooterContentTemplate>
</DxPopup>

<TagForm Tag="tag" Visible="TagFormVisible" SetTagVisiblity="SetTagVisiblity" />

@code {
    Tag tag;
    public bool TagFormVisible { get; set; } = false;
    public TaskPriority TaskPriority { get; set; }
    public Status Status { get; set; }

    public string Message { get; set; }

    [Parameter]
    public bool Visible { get; set; } = false;

    [Parameter]
    public TaskToDo Task { get; set; }

    User AssignedTo { get; set; }

    [Parameter]
    public Action<bool> SetVisiblity { get; set; }

    [Parameter]
    public bool TagVisible { get; set; } = false;

    [Parameter]
    public Project Project { get; set; }

    void OnStartAtChanged(DateTime? date)
    {
        Task.StartAt = date;
    }

    void OnDueDateChanged(DateTime? date)
    {
        Task.DueDate = date;
    }

    void OnAddCommentClick()
    {
        Comment comment = new Comment
        {
            Message = Message
        };

        Task.Comments.Add(comment);
    }

    void OnStatusChanged(Status status)
    {
        Task.Status = status;
        SaveTaskChanges();  // Zapisz zmiany po zmianie statusu
    }

    async Task SaveTaskChanges()
    {
        // Możesz wywołać metodę aktualizującą w bazie danych
        await TaskService.UpdateTaskToDoAsync(Task);
    }

    void OnOkButtonClick()
    {
        // Można tu dodatkowo zapisać zmiany lub wykonać inne akcje
        SaveTaskChanges();
        SetVisiblity?.Invoke(false);
    }

    void OnCloseButtonClick()
    {
        SetVisiblity?.Invoke(false);
    }

    public void SetTagVisiblity(bool visibility)
    {
        TagFormVisible = visibility;
        StateHasChanged();
    }

    private void ShowTagForm()
    {
        TagFormVisible = true;
    }
}




    