@page "/projects"
@using System.Globalization
@rendermode InteractiveServer
@inject TaskService TaskService
@inject UserService UserService
@inject ProjectService ProjectService
@inject NavigationManager Navigation

<div class="project-panel">
    @if (project != null)
    {
        <div class="project-details">
            <h3>@project.Name</h3>
            <div class="details-container">
                <div class="detail-item">
                    <p><strong>Data rozpoczęcia:</strong></p>
                    <p>@project.StartAt?.ToString("dd-MM-yyyy")</p>
                </div>
                <div class="detail-item">
                    <p><strong>Termin zakończenia:</strong></p>
                    <p>@project.DueDate?.ToString("dd-MM-yyyy")</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Nie wybrano projektu.</p>
    }
</div>

<div class="cw-480 ch-220">
    <DxTabs @bind-ActiveTabIndex="@ActiveTabIndex">
        <DxTab Text="Lista"></DxTab>
        <DxTab Text="Kanban"></DxTab>
        <DxTab Text="Kalendarz"></DxTab>
    </DxTabs>
    <div class="card tabs-border-top-0 tabs-border-radius-top-0;" style="min-height: 190px; border: none">
        <div class="card-body">
            @switch (ActiveTabIndex)
            {
                case 0:
                    <ProjectListView></ProjectListView>
                    break;
                case 1:
                    <ProjectKanbanView></ProjectKanbanView>
                    break;
                case 2:
                    <ProjectSchedulerView></ProjectSchedulerView>
                    break;
            }
        </div>
    </div>
</div>

@code {
    int ActiveTabIndex { get; set; } = 0;
    Project project;
    private int ProjectId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("projectId", out var projectIdValue) && int.TryParse(projectIdValue, out var projectId))
        {
            ProjectId = projectId;
        }
        project = await ProjectService.GetProjectByIdAsync(ProjectId);
        StateHasChanged();
    }
}
